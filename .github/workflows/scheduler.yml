on:
  schedule:
    - cron: "*/5 * * * *"   # sizde ne ise
  workflow_dispatch:
    inputs:
      force_post_now:
        description: "Zaman kontrolünü atla"
        type: boolean
        default: false
      dry_run:
        description: "Deneme modu (tweet atmaz)"
        type: boolean
        default: false          # <-- OTOMATİK ÇALIŞMALAR İÇİN KAPALI
      window_seconds:
        description: "Eşleşme toleransı (saniye)"
        type: number
        default: 600            # <-- 10 dakika tolerans

jobs:
  run:
    runs-on: ubuntu-latest

    # Inputs verilmemişse (örn. cron tetiklediğinde) defaultları kullan
    env:
      DRY_RUN: ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run || 'false' }}
      FORCE_POST_NOW: ${{ github.event_name == 'workflow_dispatch' && inputs.force_post_now || 'false' }}
      WINDOW_SECONDS: ${{ github.event_name == 'workflow_dispatch' && inputs.window_seconds || 600 }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.txt
      - uses: actions/cache@v4
        with:
          path: src/state.json
          key: state-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            state-${{ runner.os }}-${{ github.ref_name }}
            state-
      - name: Run scheduler
        run: python -u src/poster.py
      - name: Show state after run
        if: always()
        run: |
          if [ -f src/state.json ]; then
            echo "----- state.json -----"
            cat src/state.json
          else
            echo "state.json yok"
          fi
      - uses: actions/cache/save@v4
        if: always()
        with:
          path: src/state.json
          key: state-${{ runner.os }}-${{ github.ref_name }}
